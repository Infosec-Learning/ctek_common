<?php


namespace Drupal\ctek_common;


use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;
use Psr\Log\LoggerInterface;
use Psr\Log\LogLevel;
use Symfony\Component\DependencyInjection\ContainerInterface;

abstract class SFTPImporterSettingsFormBase extends ConfigFormBase {

  const KEY = 'ctek_common';

  public static function create(ContainerInterface $container) {
    /** @var \Drupal\ctek_common\SFTPImporterBase $importer */
    $importer = $container->get(static::KEY . '.importer');
    /** @var ConfigFactoryInterface $configFactory */
    $configFactory = $container->get('config.factory');
    return new static($importer, $configFactory);
  }

  protected $importer;

  abstract public function getKey();

  public function getFormId() {
    return $this->getKey() . '_settings_form';
  }

  public function getEditableConfigNames() {
    return [$this->getKey() . '.settings'];
  }

  public function __construct(SFTPImporterBase $importer, ConfigFactoryInterface $config_factory) {
    $this->importer = $importer;
    parent::__construct($config_factory);
  }

  public function buildForm(array $form, FormStateInterface $form_state) {
    $config = $this->config($this->getKey() . '.settings');
    $form['host'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Host'),
      '#required' => TRUE,
      '#default_value' => $config->get('host'),
    ];
    $form['path'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Path'),
      '#required' => TRUE,
      '#default_value' => $config->get('path'),
    ];
    $form['username'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Username'),
      '#required' => TRUE,
      '#default_value' => $config->get('username'),
    ];
    $form['password'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Password'),
      '#required' => TRUE,
      '#default_value' => $config->get('password'),
    ];
    $form = parent::buildForm($form, $form_state);
    $form['actions']['import'] = [
      '#type' => 'submit',
      '#name' => 'import',
      '#value' => $this->t('Save configuration and import'),
    ];
    return $form;
  }

  public function validateForm(array &$form, FormStateInterface $form_state) {
    try {
      $this->importer->test(
        $form_state->getValue('host'),
        $form_state->getValue('path'),
        $form_state->getValue('username'),
        $form_state->getValue('password'));
    } catch (\Exception $e) {
      $form_state->setError($form, $e->getMessage());
    }
  }

  public function submitForm(array &$form, FormStateInterface $form_state) {
    $this->config($this->getKey() . '.settings')
      ->set('host', $form_state->getValue('host'))
      ->set('path', $form_state->getValue('path'))
      ->set('username', $form_state->getValue('username'))
      ->set('password', $form_state->getValue('password'))
      ->save();
    parent::submitForm($form, $form_state); // TODO: Change the autogenerated stub
    if ($form_state->getTriggeringElement()['#name'] === 'import') {
      $this->importer->import();
    }
  }

}